# Smithery configuration file: https://smithery.ai/docs/config#smitheryyaml

name: Neo4j Knowledge Graph Memory
description: A Model Context Protocol (MCP) server that uses Neo4j as a backend for persistent memory storage and retrieval. Features enhanced semantic search, knowledge graphs, and sophisticated tag extraction for AI memory systems.
license: MIT
version: 2.3.13
author: sylweriusz
repository: https://github.com/sylweriusz/mcp-neo4j-memory-server

# Documentation sections
documentation:
  overview: |
    This MCP server provides a knowledge graph implementation using Neo4j as the backend storage system.
    It enables LLMs to create, query, and manage entities, relationships, and observations in a knowledge graph.
    The server is designed to provide persistent memory capabilities across conversations.
  
  installation: |
    ### Installing via NPM
    ```bash
    npm install @sylweriusz/mcp-neo4j-memory-server
    ```

    ### Manual Installation
    Add `@sylweriusz/mcp-neo4j-memory-server` in your `claude_desktop_config.json`:
    ```json
    {
      "mcpServers": {
        "graph-memory": {
          "command": "npx",
          "args": [
            "-y",
            "@sylweriusz/mcp-neo4j-memory-server"
          ],
          "env": {
            "NEO4J_URI": "bolt://localhost:7687",
            "NEO4J_USERNAME": "neo4j",
            "NEO4J_PASSWORD": "your-password",
            "NEO4J_DATABASE": "neo4j"    
          }
        }
      }
    }
    ```

    ### Docker
    Build:
    ```bash
    docker build -t mcp-neo4j-graph-memory .
    ```

    Run:
    ```bash
    docker run -dit \
      -e NEO4J_URI=bolt://neo4j:7687 \
      -e NEO4J_USERNAME=neo4j \
      -e NEO4J_PASSWORD=password \
      -e NEO4J_DATABASE=neo4j \  
      mcp-neo4j-graph-memory
    ```
  
  
  usage: |
    Use the following consolidated tools to interact with the memory system:
    
    - `memory_manage`: Create, update, delete memories (consolidated operations)
    - `memory_retrieve`: Fetch memories by ID with 2-level graph context
    - `memory_search`: Enhanced unified search with vector similarity, metadata matching, and tag filtering
    - `observation_manage`: Add or delete observations from memories
    - `relation_manage`: Create or delete relationships between memories
    - `database_switch`: Switch to different Neo4j databases
    
    Enhanced features:
    - **Vector Search**: 50% weighted semantic similarity using embeddings
    - **Metadata Search**: 25% weighted exact matching on structured data
    - **FullText Search**: 15% weighted content search across metadata
    - **Tag Matching**: 10% weighted keyword-based discovery
    - **Graph Context**: Automatic 2-level relationship traversal
    - **Chronological Ordering**: Observations sorted by creation timestamp
    
    Example system prompt:
    ```
    You are an AI assistant with persistent memory through an MCP memory server.

    MEMORY PROTOCOL:
    - Begin sessions by searching existing memories with memory_search
    - Store information in structured categories: identity, preferences, goals, relationships, projects
    - Use metadata for searchable fields (dates, statuses, types)
    - Use observations for detailed narrative content
    - Create relations between connected memories
    - Update information when it changes rather than duplicating

    MEMORY TYPES:
    - user: Personal information and preferences
    - project: Work items and initiatives  
    - conversation: Important discussion points
    - relationship: People and connections
    - knowledge: Facts and learned information

    Always search before creating to avoid duplicates. Organize information logically using graph structure.
    ```

# Build configuration
build:
  dockerfile: Dockerfile
  dockerBuildPath: .

# Preview configuration
preview:
  defaultCommand: node dist/index.mjs
  examples:
    - title: Creating Memories
      description: Create new memories in the knowledge graph
      input: |
        {"operation":"create","memories":[{"name":"John","memoryType":"person","observations":["Software Engineer","Lives in New York","Works at TechCorp"],"metadata":{"role":"developer","location":"NYC"}}]}
      output: |
        {"memories":[{"id":"Bm>xyz123","name":"John","memoryType":"person","observations":[{"content":"Software Engineer","createdAt":"2025-05-19T16:45:42.329Z"}],"tags":["software","engineer","techcorp"],"metadata":{"role":"developer","location":"NYC"}}]}
    
    - title: Memory Search
      description: Search for memories using enhanced unified search
      input: |
        {"query":"software engineer New York"}
      output: |
        {"memories":[{"id":"Bm>xyz123","name":"John","memoryType":"person","observations":[{"content":"Software Engineer","createdAt":"2025-05-19T16:45:42.329Z"}],"related":{"ancestors":[],"descendants":[]},"score":0.85}],"_meta":{"total":1,"queryTime":95}}

# Tools configuration for display
tools:
  - name: memory_manage
    description: Create, update, or delete memories with consolidated operations
    example: |
      {"operation":"create","memories":[{"name":"Jane","memoryType":"person","observations":["Data Scientist","Loves hiking"],"metadata":{"department":"AI","hobby":"outdoor"}}]}
    
  - name: memory_search
    description: Enhanced unified search with vector similarity, metadata, and tag matching
    example: |
      {"query":"hiking data science","limit":5}
  
  - name: observation_manage
    description: Add or delete observations from existing memories
    example: |
      {"operation":"add","observations":[{"memoryId":"Bm>xyz123","contents":["Completed mountain expedition"]}]}
  
  - name: relation_manage
    description: Create or delete relationships between memories
    example: |
      {"operation":"create","relations":[{"fromId":"Bm>abc789","toId":"Bm>xyz123","relationType":"COLLABORATES_WITH"}]}
  
  - name: database_switch
    description: Switch to a different Neo4j database for complete isolation
    example: |
      {"databaseName":"project-alpha"}

# Start command configuration (existing content)
startCommand:
  type: stdio
  configSchema:
    # JSON Schema defining the configuration options for the MCP.
    type: object
    properties:
      neo4jUri:
        type: string
        description: URI for Neo4j connection (e.g. bolt://localhost:7687)
        default: bolt://localhost:7687
      neo4jUsername:
        type: string
        description: Username for Neo4j authentication
        default: neo4j
      neo4jPassword:
        type: string
        description: Password for Neo4j authentication
      neo4jDatabase:
        type: string
        description: Neo4j database name to use
        default: neo4j
    description: Configuration for the Neo4j Memory Server.
  commandFunction:
    # A JS function that produces the CLI command based on the given config to start the MCP on stdio.
    |-
    (config) => {
      // Base command to run the server
      const command = 'node';
      const args = ['dist/index.mjs'];

      // Set environment variables from config
      const env = {};
      if(config.neo4jUri) {
        env.NEO4J_URI = config.neo4jUri;
      }
      if(config.neo4jUsername) {
        env.NEO4J_USERNAME = config.neo4jUsername;
      }
      if(config.neo4jPassword) {
        env.NEO4J_PASSWORD = config.neo4jPassword;
      }
      if(config.neo4jDatabase) {
        env.NEO4J_DATABASE = config.neo4jDatabase;
      }
      return { command, args, env };
    }
  exampleConfig:
    neo4jUri: bolt://localhost:7687
    neo4jUsername: neo4j
    neo4jPassword: password
    neo4jDatabase: neo4j