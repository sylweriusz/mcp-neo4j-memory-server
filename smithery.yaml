# Smithery configuration file: https://smithery.ai/docs/config#smitheryyaml

name: Neo4j Knowledge Graph Memory Server
description: A Model Context Protocol (MCP) server that uses Neo4j as a backend for knowledge graph storage and retrieval. This server allows LLMs to store and query information in a persistent graph database, enabling long-term memory capabilities.
license: MIT
version: 1.1.5
author: sylweriusz
repository: https://github.com/sylweriusz/mcp-neo4j-memory-server

# Documentation sections
documentation:
  overview: |
    This MCP server provides a knowledge graph implementation using Neo4j as the backend storage system.
    It enables LLMs to create, query, and manage entities, relationships, and observations in a knowledge graph.
    The server is designed to provide persistent memory capabilities across conversations.
  
  installation: |
    ### Installing via NPM
    ```bash
    npm install @sylweriusz/mcp-neo4j-memory-server
    ```

    ### Manual Installation
    Add `@sylweriusz/mcp-neo4j-memory-server` in your `claude_desktop_config.json`:
    ```json
    {
      "mcpServers": {
        "graph-memory": {
          "command": "npx",
          "args": [
            "-y",
            "@sylweriusz/mcp-neo4j-memory-server"
          ],
          "env": {
            "NEO4J_URI": "bolt://localhost:7687",
            "NEO4J_USERNAME": "neo4j",
            "NEO4J_PASSWORD": "your-password",
            "NEO4J_DATABASE": "neo4j"    
          }
        }
      }
    }
    ```

    ### Docker
    Build:
    ```bash
    docker build -t mcp-neo4j-graph-memory .
    ```

    Run:
    ```bash
    docker run -dit \
      -e NEO4J_URI=bolt://neo4j:7687 \
      -e NEO4J_USERNAME=neo4j \
      -e NEO4J_PASSWORD=password \
      -e NEO4J_DATABASE=neo4j \  
      mcp-neo4j-graph-memory
    ```
  
  usage: |
    Use the following tools to interact with the knowledge graph:
    
    - `create_entities`: Create multiple new entities in the knowledge graph
    - `create_relations`: Create multiple new relations between entities
    - `add_observations`: Add new observations to existing entities
    - `delete_entities`: Delete multiple entities and their associated relations
    - `delete_observations`: Delete specific observations from entities
    - `delete_relations`: Delete multiple relations from the knowledge graph
    - `search_nodes`: Search for nodes in the knowledge graph based on a query
    - `open_nodes`: Open specific nodes in the knowledge graph by their names
    - `list_entities`: Get a lightweight list of all entities with their names and types
    - `switch_database`: Switch to a different Neo4j database or create a new one
    - `get_current_database`: Get information about the current Neo4j database
    - `list_databases`: List all available Neo4j databases
    - `get_entity_list`: Get a simple list of all entity names and types

    Example system prompt:
    ```
    Follow these steps for each interaction:

    1. User Identification:
       - You should assume that you are interacting with default_user
       - If you have not identified default_user, proactively try to do so.

    2. Memory Retrieval:
       - Always begin your chat by saying only "Remembering..." and search relevant information from your knowledge graph
       - Create a search query from user words, and search things from "memory". If nothing matches, try to break down words in the query at first ("A B" to "A" and "B" for example).
       - Always refer to your knowledge graph as your "memory"

    3. Memory:
       - While conversing with the user, be attentive to any new information that falls into these categories:
         a) Basic Identity (age, gender, location, job title, education level, etc.)
         b) Behaviors (interests, habits, etc.)
         c) Preferences (communication style, preferred language, etc.)
         d) Goals (goals, targets, aspirations, etc.)
         e) Relationships (personal and professional relationships up to 3 degrees of separation)

    4. Memory Update:
       - If any new information was gathered during the interaction, update your memory as follows:
         a) Create entities for recurring organizations, people, and significant events
         b) Connect them to the current entities using relations
         c) Store facts about them as observations
    ```

# Build configuration
build:
  dockerfile: Dockerfile
  dockerBuildPath: .

# Preview configuration
preview:
  defaultCommand: node dist/index.mjs
  examples:
    - title: Creating Entities
      description: Create new entities in the knowledge graph
      input: |
        {"entities":[{"name":"John","entityType":"Person","observations":["Software Engineer","Lives in New York","Works at TechCorp"]}]}
      output: |
        [{"name":"John","entityType":"Person","observations":["Software Engineer","Lives in New York","Works at TechCorp"]}]
    
    - title: Searching Nodes
      description: Search for entities in the knowledge graph
      input: |
        {"query":"Tech"}
      output: |
        [{"name":"John","entityType":"Person","observations":["Software Engineer","Lives in New York","Works at TechCorp"],"match":{"score":0.78,"field":"observations","matchedText":"Works at TechCorp"}}]

# Tools configuration for display
tools:
  - name: create_entities
    description: Create multiple new entities in the knowledge graph
    example: |
      {"entities":[{"name":"Jane","entityType":"Person","observations":["Data Scientist","Loves hiking"]}]}
    
  - name: create_relations
    description: Create multiple new relations between entities in the knowledge graph
    example: |
      {"relations":[{"from":"Jane","to":"TechCorp","relationType":"WORKS_AT"}]}
    
  - name: search_nodes
    description: Search for nodes in the knowledge graph based on a query
    example: |
      {"query":"hiking"}
  
  - name: switch_database
    description: Switch to a different Neo4j database or create a new one if it doesn't exist
    example: |
      {"databaseName":"project-xyz","createIfNotExists":true}

# Start command configuration (existing content)
startCommand:
  type: stdio
  configSchema:
    # JSON Schema defining the configuration options for the MCP.
    type: object
    properties:
      neo4jUri:
        type: string
        description: URI for Neo4j connection (e.g. bolt://localhost:7687)
        default: bolt://localhost:7687
      neo4jUsername:
        type: string
        description: Username for Neo4j authentication
        default: neo4j
      neo4jPassword:
        type: string
        description: Password for Neo4j authentication
      neo4jDatabase:
        type: string
        description: Neo4j database name to use
        default: neo4j
    description: Configuration for the Neo4j Memory Server.
  commandFunction:
    # A JS function that produces the CLI command based on the given config to start the MCP on stdio.
    |-
    (config) => {
      // Base command to run the server
      const command = 'node';
      const args = ['dist/index.mjs'];

      // Set environment variables from config
      const env = {};
      if(config.neo4jUri) {
        env.NEO4J_URI = config.neo4jUri;
      }
      if(config.neo4jUsername) {
        env.NEO4J_USERNAME = config.neo4jUsername;
      }
      if(config.neo4jPassword) {
        env.NEO4J_PASSWORD = config.neo4jPassword;
      }
      if(config.neo4jDatabase) {
        env.NEO4J_DATABASE = config.neo4jDatabase;
      }
      return { command, args, env };
    }
  exampleConfig:
    neo4jUri: bolt://localhost:7687
    neo4jUsername: neo4j
    neo4jPassword: password
    neo4jDatabase: neo4j